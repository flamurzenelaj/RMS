let updatefoodValidator,foodModel,fs;_6f5‍.x([["default",()=>_6f5‍.o]]);_6f5‍.w("../validators/updatefoodValidators",[["default",["updatefoodValidator"],function(v){updatefoodValidator=v}]]);_6f5‍.w("../models/foodModel",[["default",["foodModel"],function(v){foodModel=v}]]);_6f5‍.w("fs",[["default",["fs"],function(v){fs=v}]]);



const filesDir = `${__dirname}/../public/foodImages/`;

const foodController = {
    list: async (req, res) => {
        const list = await foodModel.find();
        return res.json(list)
    },
    get: async (req, res) => {

        const { id } = req.params

        const foundItem = await foodModel.findOne({ _id: id })
        return res.json(foundItem)
    },
    create: async (req, res) => {
        try {
            const foodData = new Object({
                name: req.body.name,
                price: req.body.price,
                description: req.body.description,
                file: req.file.filename
            })
            const newfood = new foodModel(foodData);
            await newfood.save();
            return res.json(newfood);
        } catch (err) {
            return res.json({
                message: err.message
            })
        }
    },
    savePhoto: () => {
        const multer = require('multer');
        const storage = multer.diskStorage({
            destination: function (req, file, cb) {
                cb(null, `${__dirname}/../public/foodImages/`);
            },
            filename: function (req, file, cb) {
                cb(null, Date.now() + file.originalname);
            }
        });
        upload.single('file');
    },
    delete: async (req, res) => {
        const { id } = req.params;
        const deletedFood = await foodModel.findOne({
            _id: id,
        });
        const food = await foodModel.deleteOne({ _id: id });
        if (food.deletedCount != 0) {
            fs.unlinkSync(filesDir + deletedFood.file);
            return res.json({ message: 'Deleted Succefully' });
        }
        else
            return res.status(400).json({ message: 'Nothing Deleted' });

    },
    put: async (req, res) => {
        const food = req.body;

        // const validationResult = updatefoodValidator.validate(food);

        // if (validationResult.error) {
        //     return res.json({
        //         message: "Validation failed while updating",
        //         error: validationResult.error,
        //     });
        // }

        await foodModel.updateOne({ _id: food._id }, food);

        const updatedFood = await foodModel.find({
            _id: food._id,
        });
        return res.json(updatedFood);
    },
}

_6f5‍.d(foodController);
